# -*- coding: utf-8 -*-
"""Malware.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xnfO3xHESW6gDo87mFkfZUh4_MRrvrz6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.mixture import GaussianMixture
from sklearn.cluster import AgglomerativeClustering
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

# Load dataset
# Adjust the file path as necessary
df = pd.read_csv('/content/CTU-IoT-Malware-Capture-8-1conn.log.labeled.csv', delimiter='|')

# Data preprocessing: Select relevant features and handle missing values
features = ['duration', 'orig_bytes', 'resp_bytes', 'orig_pkts', 'resp_pkts']
# Convert to numeric, forcing errors to NaN
df[features] = df[features].apply(pd.to_numeric, errors='coerce')

# Fill NaN values with the mean or another strategy
df[features].fillna(df[features].mean(), inplace=True)
X = df[features].dropna()

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Initial cluster analysis (for both GMM and Agglomerative)
print("Initial Cluster Analysis:")
print(f"Number of records: {len(X_scaled)}")
print(f"Features used for clustering: {features}\n")

# Visualizing GMM Clusters
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
plt.figure(figsize=(14, 6))

# Gaussian Mixture Models (GMM)
gmm = GaussianMixture(n_components=2, random_state=0)
gmm_labels = gmm.fit_predict(X_scaled)
counts_gmm = np.bincount(gmm_labels)
gmm_iterations = gmm.n_iter_
gmm_silhouette = silhouette_score(X_scaled, gmm_labels)

print("GMM Clustering Results:")
print(f"Initial clusters (before fitting): 2")
print(f"Final clusters (after fitting): \nCluster 0 : {counts_gmm[0]}\nCluster 1 : {counts_gmm[1]}")
print(f"Number of iterations: {gmm_iterations}\n")
print(f"GMM Silhouette Score: {gmm_silhouette:.2f}")
print(f"\nGMM Cluster Centers:\n{gmm.means_}")

# GMM Clusters
plt.subplot(1, 2,1)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=gmm_labels, cmap='viridis', marker='o')
plt.title('Gaussian Mixture Models Clustering')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar()
plt.tight_layout()
plt.show()

# Initial cluster analysis (for both GMM and Agglomerative)
print("Initial Cluster Analysis:")
print(f"Number of records: {len(X_scaled)}")
print(f"Features used for clustering: {features}\n")

# Agglomerative Hierarchical Clustering
agglo = AgglomerativeClustering(n_clusters=2)
agglo_labels = agglo.fit_predict(X_scaled)
counts_agglo = np.bincount(agglo_labels)
agglo_silhouette = silhouette_score(X_scaled, agglo_labels)

print("\nAgglomerative Clustering Results:")
print(f"Initial clusters (before fitting): 2")
print(f"Final clusters (after fitting): \nCluster 0 : {counts_agglo[0]}\nCluster 1 : {counts_agglo[1]}")
print(f"Epoch size: Completed fitting\n")  # This is the equivalent of epoch size
print(f"Agglomerative Clustering Silhouette Score: {agglo_silhouette:.2f}")
print(f"\nAgglomerative Cluster Labels:\n{np.unique(agglo_labels)}")

# Agglomerative Clustering
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=agglo_labels, cmap='viridis', marker='o')
plt.title('Agglomerative Clustering')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar()

plt.tight_layout()
plt.show()